# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
#  check https://github.com/CMeeg/next-azure

trigger:
  - none

pool:
  vmImage: ubuntu-latest

parameters:
  - name: isStatic
    displayName: Is static website?
    type: boolean
    default: 'false'
  - name: forceTestsOk
    displayName: Must pass unit tests
    type: boolean
    default: 'true'
  - name: environmentMap
    displayName: List of environnement to build
    type: object
    default:
      environment_dev: development
      environment_test: test
      environment_qa: qa
      environment_prod: production
  - name: verbose
    type: boolean
    displayName: Verbose Build
    default: 'false'

jobs:
  # =========================================================================
  # Set variables (build numbers)
  # =========================================================================
  - job: 'setVariables'
    displayName: 'Set variables (build numbers)'
    pool:
      vmImage: windows-latest
    steps:
      - bash: |
          echo "Build.Reason $(Build.Reason) "
          echo "Agent.OS $(Agent.OS) "
          echo "Build.BuildId $(Build.BuildId) "
          echo "Build.BuildNumber $(Build.BuildNumber) "
          echo "Build.DefinitionName $(Build.DefinitionName) "
          echo "Build.Repository.Uri $(Build.Repository.Uri) "
          echo "Build.SourceBranch $(Build.SourceBranch) "
          echo "Build.SourceBranchName $(Build.SourceBranchName) "
          echo "Build.SourceVersion $(Build.SourceVersion) "
      # Build.Reason Manual
      # Agent.OS Windows_NT
      # Build.BuildId 384
      # Build.BuildNumber 20220427.8
      # Build.DefinitionName water-user-website
      # Build.Repository.Uri https://RDMW-RWF@dev.azure.com/RDMW-RWF/Water%20User/_git/water-user-website
      # Build.SourceBranch refs/heads/main
      # Build.SourceBranchName main
      # Build.SourceVersion 99ae9fb1ea86c66b56cc0a180140de4e1768b413

      - bash: |
          echo "##vso[task.setvariable variable=release_name;isOutput=true;]$(Build.DefinitionName)_$(Build.BuildId)_$(Build.SourceBranchName)_$(Build.Reason)_$(Build.BuildNumber)"
        name: release_name
      - bash: |
          echo "##vso[task.setvariable variable=release_date;isOutput=true;]$(Build.BuildNumber)"
        name: release_date

  # =========================================================================
  # Setup the Build and Test Environment
  # =========================================================================
  - job: 'SetupEnvironement'
    dependsOn: setVariables
    condition: succeeded()
    displayName: 'Setup the Build and Test Environment'

    variables:
      release_name: $[ dependencies.setVariables.outputs['release_name.release_name'] ]
      release_date: $[ dependencies.setVariables.outputs['release_date.release_date'] ]
    steps:
      - bash: |
          echo "release_name: $(release_name)"
          echo "release_date: $(release_date)"
      - task: NodeTool@0
        inputs:
          versionSpec: '16.x'
        displayName: 'Install Node.js 16.x'

      # - task: Npm@1
      #   displayName: 'install yarn'
      #   inputs:
      #     command: 'custom'
      #     workingDir: '$(Build.SourcesDirectory)/'
      #     customCommand: 'install -global yarn'

      - task: Cache@2
        displayName: 'Cache node_modules'
        # check https://docs.microsoft.com/en-us/azure/devops/pipelines/release/caching?view=azure-devops
        inputs:
          key: node_modules_dev | "$(Agent.OS)" | package.json
          path: '$(Build.SourcesDirectory)/node_modules'
        continueOnError: true

      # - task: Npm@1
      #   displayName: 'Install the dependencies'
      #   inputs:
      #     command: 'custom'
      #     workingDir: '$(Build.SourcesDirectory)/'
      #     customCommand: 'install'

      - script: |
          yarn install
        displayName: 'Install Node JS packages (using yarn)'

      # - task: Npm@1
      #   displayName: 'Install the dev dependencies'
      #   inputs:
      #     command: 'custom'
      #     workingDir: '$(Build.SourcesDirectory)/'
      #     customCommand: 'install --only=dev'

      - script: |
          yarn cache list
          npm cache ls
          npm cache verify
        displayName: NPM Show cache content
        workingDirectory: '$(Build.SourcesDirectory)/'
        condition: eq('${{parameters.verbose}}', 'true')

      - script: npm run lint
        displayName: Lint
        workingDirectory: '$(Build.SourcesDirectory)/'

      - script: |
          yarn test:ci
        displayName: 'Run CI unit tests'
        workingDirectory: '$(Build.SourcesDirectory)/'

      - task: PublishTestResults@2
        displayName: 'supply npm test results to pipelines'
        condition: succeededOrFailed() # because otherwise we won't know what tests failed
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: 'junit.xml'
          searchFolder: '$(Build.SourcesDirectory)'
          testRunTitle: 'Water User Website CI unit tests'

      - script: |
          yarn coverage
        displayName: 'Run  tests  coverage report'
        workingDirectory: '$(Build.SourcesDirectory)/'
        continueOnError: 'true'

      - task: PublishCodeCoverageResults@1
        displayName: Coverage report
        condition: succeededOrFailed()
        inputs:
          codeCoverageTool: Cobertura # or JaCoCo
          summaryFileLocation: '$(Build.SourcesDirectory)/**/*coverage.xml'
          # reportDirectory: '$(Build.SourcesDirectory)/**/coverage'

  # =========================================================================
  # Build the app and Export as static website in "out" folder
  # =========================================================================
  - job: 'BuildAndExport'
    strategy:
      matrix:
        ${{each thing in parameters.environmentMap}}:
          ${{thing.key}}:
            buildenv: ${{thing.value}}
    displayName: 'Build the app and configure it for each environment (development, test, qa, production)'
    dependsOn:
      - SetupEnvironement
      - setVariables
    condition: or(succeeded(), eq('${{parameters.forceTestsOk}}', 'false'))
    variables:
      release_name: $[ dependencies.setVariables.outputs['release_name.release_name'] ]
      release_date: $[ dependencies.setVariables.outputs['release_date.release_date'] ]
    steps:
      - task: Cache@2
        displayName: 'Cache node_modules'
        # check https://docs.microsoft.com/en-us/azure/devops/pipelines/release/caching?view=azure-devops
        inputs:
          key: node_modules_build | "$(Agent.OS)" | package.json
          path: '$(Build.SourcesDirectory)/node_modules'
        continueOnError: true

      # - task: Npm@1
      #   displayName: 'Install the dependencies'
      #   inputs:
      #     command: 'custom'
      #     workingDir: '$(Build.SourcesDirectory)/'
      #     customCommand: 'install'

      - script: |
          yarn install --production
          yarn add --dev typescript @types/react @types/node
        displayName: 'Install Node JS packages (using yarn)'

      - script: |
          mkdir ./env
          cp .env* ./env
          rm .env* 
          cp ./env/.env .
          cp ./env/.env.$(buildenv) .env.production
          ls .env*
        displayName: Switch the .env files for the current build environment
        workingDirectory: '$(Build.SourcesDirectory)/'

      - script: |
          yarn cache list
          npm cache ls
          npm cache verify
        displayName: NPM Show cache content
        workingDirectory: '$(Build.SourcesDirectory)/'
        condition: eq('${{parameters.verbose}}', 'true')

      - task: CmdLine@2
        displayName: 'Update Build number in config file'
        inputs:
          script: |
            echo $(release_name)
            sed -i 's/WIQ_BUILD_NUMBER=1/WIQ_BUILD_NUMBER=$(Build.BuildId)/' .env
            sed -i 's/WIQ_RELEASE_NUMBER=1/WIQ_RELEASE_NUMBER=$(release_name)/' .env
            sed -i 's/WIQ_RELEASE_DATE=/WIQ_RELEASE_DATE=$(release_date)/' .env
          workingDirectory: '$(Build.SourcesDirectory)/'

      - script: |
          yarn build
        displayName: 'Build the app'
        workingDirectory: '$(Build.SourcesDirectory)/'
        env:
          NODE_ENV: production

      # - script: |
      #     npm prune --production
      #   displayName: 'Prune the build for production'
      #   workingDirectory: '$(Build.SourcesDirectory)/'

      - script: |
          npm run export
        displayName: 'Export as static website in "out" folder, if needed'
        workingDirectory: '$(Build.SourcesDirectory)/'
        condition: eq('${{parameters.isStatic}}', 'true')

      - script: |
          zip -r --symlinks '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip' next.config.js  node_modules  package.json  .next pages .env*
        displayName: 'ZIP com SymLinks'
        workingDirectory: '$(Build.SourcesDirectory)/'

      - task: PublishBuildArtifacts@1
        condition: succeeded()
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          ArtifactName: $(buildenv)
          publishLocation: 'Container'
